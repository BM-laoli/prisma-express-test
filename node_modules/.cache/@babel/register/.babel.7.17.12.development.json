{"{\"assumptions\":{},\"sourceRoot\":\"/Volumes/WD_BLACK/origin/prisma-express-test/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Volumes/WD_BLACK/origin/prisma-express-test\",\"filename\":\"/Volumes/WD_BLACK/origin/prisma-express-test/index.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Volumes/WD_BLACK/origin/prisma-express-test\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.17.12:development":{"value":{"code":"const express = require('express');\n\nconst bodyParser = require('body-parser');\n\nconst prismaClint = require('@prisma/client');\n\nconst {\n  graphqlHTTP\n} = require('express-graphql');\n\nconst {\n  makeExecutableSchema\n} = require('@graphql-tools/schema'); // 对于es6 使用  npx babel-node  index.js 去编译 部分esModule, \n// -------------init------------- \n\n\nconst prisma = new prismaClint.PrismaClient();\nconst app = express(); // -------------使用graphql------------- \n// 1. 定义类型 和 query\n\nconst typeDefs = `\n  type User {\n    email: String!\n    name: String\n  }\n  type Query {\n    allUsers: [ User! ] !\n  }\n  `; // 2. 定义irsolvers 和 与前面对于的query参数\n\nconst resolvers = {\n  Query: {\n    allUsers: () => {\n      return prisma.user.findMany();\n    }\n  }\n}; // 3. 定义 schema 规则\n\nconst schema = makeExecutableSchema({\n  resolvers,\n  typeDefs\n});\napp.use(bodyParser.json()); // 应用这个 中间件\n\napp.use(\"/graphql\", graphqlHTTP({\n  schema\n}));\nconst server = app.listen(3000, () => {\n  console.log('server start');\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsImJvZHlQYXJzZXIiLCJwcmlzbWFDbGludCIsImdyYXBocWxIVFRQIiwibWFrZUV4ZWN1dGFibGVTY2hlbWEiLCJwcmlzbWEiLCJQcmlzbWFDbGllbnQiLCJhcHAiLCJ0eXBlRGVmcyIsInJlc29sdmVycyIsIlF1ZXJ5IiwiYWxsVXNlcnMiLCJ1c2VyIiwiZmluZE1hbnkiLCJzY2hlbWEiLCJ1c2UiLCJqc29uIiwic2VydmVyIiwibGlzdGVuIiwiY29uc29sZSIsImxvZyJdLCJzb3VyY2VSb290IjoiL1ZvbHVtZXMvV0RfQkxBQ0svb3JpZ2luL3ByaXNtYS1leHByZXNzLXRlc3QvIiwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpIFxuY29uc3QgYm9keVBhcnNlciA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJylcbmNvbnN0IHByaXNtYUNsaW50ID0gcmVxdWlyZSgnQHByaXNtYS9jbGllbnQnKVxuY29uc3QgeyBncmFwaHFsSFRUUCB9ID0gcmVxdWlyZSgnZXhwcmVzcy1ncmFwaHFsJyk7XG5cbmNvbnN0IHsgbWFrZUV4ZWN1dGFibGVTY2hlbWEgfSA9IHJlcXVpcmUoJ0BncmFwaHFsLXRvb2xzL3NjaGVtYScpXG4vLyDlr7nkuo5lczYg5L2/55SoICBucHggYmFiZWwtbm9kZSAgaW5kZXguanMg5Y6757yW6K+RIOmDqOWIhmVzTW9kdWxlLCBcblxuXG4vLyAtLS0tLS0tLS0tLS0taW5pdC0tLS0tLS0tLS0tLS0gXG5jb25zdCBwcmlzbWEgPSBuZXcgcHJpc21hQ2xpbnQuUHJpc21hQ2xpZW50KClcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKVxuXG4vLyAtLS0tLS0tLS0tLS0t5L2/55SoZ3JhcGhxbC0tLS0tLS0tLS0tLS0gXG4vLyAxLiDlrprkuYnnsbvlnosg5ZKMIHF1ZXJ5XG5jb25zdCB0eXBlRGVmcyA9IGBcbiAgdHlwZSBVc2VyIHtcbiAgICBlbWFpbDogU3RyaW5nIVxuICAgIG5hbWU6IFN0cmluZ1xuICB9XG4gIHR5cGUgUXVlcnkge1xuICAgIGFsbFVzZXJzOiBbIFVzZXIhIF0gIVxuICB9XG4gIGBcblxuLy8gMi4g5a6a5LmJaXJzb2x2ZXJzIOWSjCDkuI7liY3pnaLlr7nkuo7nmoRxdWVyeeWPguaVsFxuY29uc3QgcmVzb2x2ZXJzID0ge1xuICBRdWVyeToge1xuICAgIGFsbFVzZXJzOiAoKSA9PiB7XG4gICAgICByZXR1cm4gcHJpc21hLnVzZXIuZmluZE1hbnkoKVxuICAgIH1cbiAgfVxufVxuXG4vLyAzLiDlrprkuYkgc2NoZW1hIOinhOWImVxuY29uc3Qgc2NoZW1hID0gbWFrZUV4ZWN1dGFibGVTY2hlbWEoe1xuICByZXNvbHZlcnMsXG4gIHR5cGVEZWZzXG59KVxuXG5cbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpXG5cbi8vIOW6lOeUqOi/meS4qiDkuK3pl7Tku7ZcbmFwcC51c2UoXCIvZ3JhcGhxbFwiLCBncmFwaHFsSFRUUCh7XG4gIHNjaGVtYVxufSkpXG5cbmNvbnN0IHNlcnZlciA9IGFwcC5saXN0ZW4oMzAwMCwgKCkgPT4ge1xuICBjb25zb2xlLmxvZygnc2VydmVyIHN0YXJ0Jyk7XG59KVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXZCOztBQUNBLE1BQU1DLFVBQVUsR0FBR0QsT0FBTyxDQUFDLGFBQUQsQ0FBMUI7O0FBQ0EsTUFBTUUsV0FBVyxHQUFHRixPQUFPLENBQUMsZ0JBQUQsQ0FBM0I7O0FBQ0EsTUFBTTtFQUFFRztBQUFGLElBQWtCSCxPQUFPLENBQUMsaUJBQUQsQ0FBL0I7O0FBRUEsTUFBTTtFQUFFSTtBQUFGLElBQTJCSixPQUFPLENBQUMsdUJBQUQsQ0FBeEMsQyxDQUNBO0FBR0E7OztBQUNBLE1BQU1LLE1BQU0sR0FBRyxJQUFJSCxXQUFXLENBQUNJLFlBQWhCLEVBQWY7QUFDQSxNQUFNQyxHQUFHLEdBQUdSLE9BQU8sRUFBbkIsQyxDQUVBO0FBQ0E7O0FBQ0EsTUFBTVMsUUFBUSxHQUFJO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FSQSxDLENBVUE7O0FBQ0EsTUFBTUMsU0FBUyxHQUFHO0VBQ2hCQyxLQUFLLEVBQUU7SUFDTEMsUUFBUSxFQUFFLE1BQU07TUFDZCxPQUFPTixNQUFNLENBQUNPLElBQVAsQ0FBWUMsUUFBWixFQUFQO0lBQ0Q7RUFISTtBQURTLENBQWxCLEMsQ0FRQTs7QUFDQSxNQUFNQyxNQUFNLEdBQUdWLG9CQUFvQixDQUFDO0VBQ2xDSyxTQURrQztFQUVsQ0Q7QUFGa0MsQ0FBRCxDQUFuQztBQU1BRCxHQUFHLENBQUNRLEdBQUosQ0FBUWQsVUFBVSxDQUFDZSxJQUFYLEVBQVIsRSxDQUVBOztBQUNBVCxHQUFHLENBQUNRLEdBQUosQ0FBUSxVQUFSLEVBQW9CWixXQUFXLENBQUM7RUFDOUJXO0FBRDhCLENBQUQsQ0FBL0I7QUFJQSxNQUFNRyxNQUFNLEdBQUdWLEdBQUcsQ0FBQ1csTUFBSixDQUFXLElBQVgsRUFBaUIsTUFBTTtFQUNwQ0MsT0FBTyxDQUFDQyxHQUFSLENBQVksY0FBWjtBQUNELENBRmMsQ0FBZiJ9","map":{"version":3,"names":["express","require","bodyParser","prismaClint","graphqlHTTP","makeExecutableSchema","prisma","PrismaClient","app","typeDefs","resolvers","Query","allUsers","user","findMany","schema","use","json","server","listen","console","log"],"sourceRoot":"/Volumes/WD_BLACK/origin/prisma-express-test/","sources":["index.js"],"sourcesContent":["const express = require('express') \nconst bodyParser = require('body-parser')\nconst prismaClint = require('@prisma/client')\nconst { graphqlHTTP } = require('express-graphql');\n\nconst { makeExecutableSchema } = require('@graphql-tools/schema')\n// 对于es6 使用  npx babel-node  index.js 去编译 部分esModule, \n\n\n// -------------init------------- \nconst prisma = new prismaClint.PrismaClient()\nconst app = express()\n\n// -------------使用graphql------------- \n// 1. 定义类型 和 query\nconst typeDefs = `\n  type User {\n    email: String!\n    name: String\n  }\n  type Query {\n    allUsers: [ User! ] !\n  }\n  `\n\n// 2. 定义irsolvers 和 与前面对于的query参数\nconst resolvers = {\n  Query: {\n    allUsers: () => {\n      return prisma.user.findMany()\n    }\n  }\n}\n\n// 3. 定义 schema 规则\nconst schema = makeExecutableSchema({\n  resolvers,\n  typeDefs\n})\n\n\napp.use(bodyParser.json())\n\n// 应用这个 中间件\napp.use(\"/graphql\", graphqlHTTP({\n  schema\n}))\n\nconst server = app.listen(3000, () => {\n  console.log('server start');\n})\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,gBAAD,CAA3B;;AACA,MAAM;EAAEG;AAAF,IAAkBH,OAAO,CAAC,iBAAD,CAA/B;;AAEA,MAAM;EAAEI;AAAF,IAA2BJ,OAAO,CAAC,uBAAD,CAAxC,C,CACA;AAGA;;;AACA,MAAMK,MAAM,GAAG,IAAIH,WAAW,CAACI,YAAhB,EAAf;AACA,MAAMC,GAAG,GAAGR,OAAO,EAAnB,C,CAEA;AACA;;AACA,MAAMS,QAAQ,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GARA,C,CAUA;;AACA,MAAMC,SAAS,GAAG;EAChBC,KAAK,EAAE;IACLC,QAAQ,EAAE,MAAM;MACd,OAAON,MAAM,CAACO,IAAP,CAAYC,QAAZ,EAAP;IACD;EAHI;AADS,CAAlB,C,CAQA;;AACA,MAAMC,MAAM,GAAGV,oBAAoB,CAAC;EAClCK,SADkC;EAElCD;AAFkC,CAAD,CAAnC;AAMAD,GAAG,CAACQ,GAAJ,CAAQd,UAAU,CAACe,IAAX,EAAR,E,CAEA;;AACAT,GAAG,CAACQ,GAAJ,CAAQ,UAAR,EAAoBZ,WAAW,CAAC;EAC9BW;AAD8B,CAAD,CAA/B;AAIA,MAAMG,MAAM,GAAGV,GAAG,CAACW,MAAJ,CAAW,IAAX,EAAiB,MAAM;EACpCC,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD,CAFc,CAAf"}},"mtime":1652888023740}}